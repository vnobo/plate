plugins {
    id "java"
    id "idea"
    id "org.springframework.boot"
    id "io.spring.dependency-management"
    id 'org.graalvm.buildtools.native'
}

java {
    sourceCompatibility = '21'
    targetCompatibility = '21'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

tasks.named("bootBuildImage") {
    tags = ["${dockerPrefix}/${rootProject.name}-${project.name}:latest"]
    imageName = ("${dockerPrefix}/${rootProject.name}-${project.name}:${project.version}")
    publish = true
    pullPolicy = "IF_NOT_PRESENT"
    environment = [
            "BP_JVM_VERSION" : "21",
            "BP_NATIVE_IMAGE": "true",
            "BPE_DELIM_JAVA_TOOL_OPTIONS" : " ",
            "BPE_APPEND_JAVA_TOOL_OPTIONS": "-Dfile.encoding=UTF-8 -XX:+HeapDumpOnOutOfMemoryError"
    ]
    buildWorkspace {
        bind {
            source = "cache-${rootProject.name}-${project.name}.work"
        }
    }
    buildCache {
        bind {
            source = "cache-${rootProject.name}-${project.name}.build"
        }
    }
    launchCache {
        bind {
            source = "cache-${rootProject.name}-${project.name}.launch"
        }
    }
    docker {
        publishRegistry {
            username = "${dockerUsername}"
            password = "${dockerPassword}"
            email = "${dockerEmail}"
        }
    }
}

idea {
    //if you want parts of paths in resulting files (*.iml, etc.) to be replaced by variables (Files)
    pathVariables GRADLE_HOME: file('../../gradle')
    module {
        iml {
            beforeMerged { module ->
                //if you want skip merging exclude dirs
                module.excludeFolders.clear()
            }
        }
        //if you prefer different output folders
        inheritOutputDirs = false
        outputDir = file('muchBetterOutputDir') as File
        testOutputDir = file('muchBetterTestOutputDir') as File

    }
}

dependencies {

    implementation("com.google.guava:guava:32.+")
    implementation("com.github.f4b6a3:uuid-creator:5.+")

    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation("org.springframework.boot:spring-boot-starter-oauth2-client")
    //implementation("org.springframework.boot:spring-boot-starter-oauth2-resource-server")
    implementation("org.springframework.session:spring-session-data-redis")

    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.boot:spring-boot-starter-webflux")
    implementation("org.springframework.boot:spring-boot-starter-validation")
    implementation("org.springframework.boot:spring-boot-starter-data-redis-reactive")

    implementation("org.springframework.boot:spring-boot-starter-data-r2dbc")
    implementation("org.postgresql:r2dbc-postgresql")
    implementation("io.r2dbc:r2dbc-spi")

    compileOnly("org.projectlombok:lombok")
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")
    annotationProcessor("org.projectlombok:lombok")

    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("io.projectreactor:reactor-test")
    testImplementation("org.springframework.security:spring-security-test")

    developmentOnly("org.springframework.boot:spring-boot-devtools")
}

tasks.named("test") {
    useJUnitPlatform()
}