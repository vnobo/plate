plugins {
    id "java"
    id "idea"
    id "org.springframework.boot"
    id "io.spring.dependency-management"
    id "org.graalvm.buildtools.native"
}

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

tasks.named("bootBuildImage") {
    tags = ["alexbob/${project.name}:latest"]
    imageName = "alexbob/${project.name}:${project.version}"
    bindings = [
            "/mnt/build-image/syft:/platform/bindings/syft"
    ]
    environment = [
            "BP_JVM_VERSION"              : "17",
            "BP_NATIVE_IMAGE"             : "true",
            "BPE_DELIM_JAVA_TOOL_OPTIONS" : " ",
            "BPE_APPEND_JAVA_TOOL_OPTIONS": "-Dspring.profiles.active=test -Dfile.encoding=UTF-8 " +
                    "-XX:+HeapDumpOnOutOfMemoryError"
    ]
    publish = true
    buildCache {
        volume {
            name = "cache.${rootProject.name}.${project.name}.build"
        }
    }
    launchCache {
        volume {
            name = "cache.${rootProject.name}.${project.name}.launch"
        }
    }
    docker.publishRegistry {
        username = "${dockerUsername}"
        password = "${dockerPassword}"
        email = "${dockerEmail}"
    }
}

idea.module {
    outputDir = file("$buildDir/out/")
    testOutputDir = file("$buildDir/test")
}

dependencies {

    implementation("com.google.guava:guava:${guavaVersion}")

    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation("org.springframework.session:spring-session-data-redis")

    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.boot:spring-boot-starter-webflux")
    implementation("org.springframework.boot:spring-boot-starter-validation")
    implementation("org.springframework.boot:spring-boot-starter-data-redis-reactive")

    implementation("org.springframework.boot:spring-boot-starter-data-r2dbc")
    implementation("org.postgresql:r2dbc-postgresql")
    implementation("io.r2dbc:r2dbc-spi")

    compileOnly("org.projectlombok:lombok")
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")
    annotationProcessor("org.projectlombok:lombok")

    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("io.projectreactor:reactor-test")
    testImplementation("org.springframework.security:spring-security-test")

    developmentOnly("org.springframework.boot:spring-boot-devtools")
}

tasks.named("test") {
    useJUnitPlatform()
}